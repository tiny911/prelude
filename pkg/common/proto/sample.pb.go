// Code generated by protoc-gen-go. DO NOT EDIT.
// source: sample.proto

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	sample.proto

It has these top-level messages:
	STSamplePingReq
	STSamplePingRsp
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

// 服务错误码
// 下列错误码会同步至commont/error/error.go文件中
type ErrCode int32

const (
	ErrCode_ErrOk          ErrCode = 0
	ErrCode_ErrUnknown     ErrCode = 101
	ErrCode_ErrArgsInvalid ErrCode = 102
	ErrCode_ErrArgsEmpty   ErrCode = 103
	ErrCode_ErrSystem      ErrCode = 104
	ErrCode_ErrDB          ErrCode = 105
	ErrCode_ErrNoServe     ErrCode = 106
)

var ErrCode_name = map[int32]string{
	0:   "ErrOk",
	101: "ErrUnknown",
	102: "ErrArgsInvalid",
	103: "ErrArgsEmpty",
	104: "ErrSystem",
	105: "ErrDB",
	106: "ErrNoServe",
}
var ErrCode_value = map[string]int32{
	"ErrOk":          0,
	"ErrUnknown":     101,
	"ErrArgsInvalid": 102,
	"ErrArgsEmpty":   103,
	"ErrSystem":      104,
	"ErrDB":          105,
	"ErrNoServe":     106,
}

func (x ErrCode) String() string {
	return proto1.EnumName(ErrCode_name, int32(x))
}
func (ErrCode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// Ping请求
type STSamplePingReq struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name"`
}

func (m *STSamplePingReq) Reset()                    { *m = STSamplePingReq{} }
func (m *STSamplePingReq) String() string            { return proto1.CompactTextString(m) }
func (*STSamplePingReq) ProtoMessage()               {}
func (*STSamplePingReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *STSamplePingReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// Ping响应
type STSamplePingRsp struct {
	TraceId string `protobuf:"bytes,1,opt,name=traceId" json:"traceId"`
	Message string `protobuf:"bytes,2,opt,name=message" json:"message"`
}

func (m *STSamplePingRsp) Reset()                    { *m = STSamplePingRsp{} }
func (m *STSamplePingRsp) String() string            { return proto1.CompactTextString(m) }
func (*STSamplePingRsp) ProtoMessage()               {}
func (*STSamplePingRsp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *STSamplePingRsp) GetTraceId() string {
	if m != nil {
		return m.TraceId
	}
	return ""
}

func (m *STSamplePingRsp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto1.RegisterType((*STSamplePingReq)(nil), "sample.STSamplePingReq")
	proto1.RegisterType((*STSamplePingRsp)(nil), "sample.STSamplePingRsp")
	proto1.RegisterEnum("sample.ErrCode", ErrCode_name, ErrCode_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Sample service

type SampleClient interface {
	// ping 服务check接口
	Ping(ctx context.Context, in *STSamplePingReq, opts ...grpc.CallOption) (*STSamplePingRsp, error)
}

type sampleClient struct {
	cc *grpc.ClientConn
}

func NewSampleClient(cc *grpc.ClientConn) SampleClient {
	return &sampleClient{cc}
}

func (c *sampleClient) Ping(ctx context.Context, in *STSamplePingReq, opts ...grpc.CallOption) (*STSamplePingRsp, error) {
	out := new(STSamplePingRsp)
	err := grpc.Invoke(ctx, "/sample.Sample/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Sample service

type SampleServer interface {
	// ping 服务check接口
	Ping(context.Context, *STSamplePingReq) (*STSamplePingRsp, error)
}

func RegisterSampleServer(s *grpc.Server, srv SampleServer) {
	s.RegisterService(&_Sample_serviceDesc, srv)
}

func _Sample_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(STSamplePingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SampleServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sample.Sample/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SampleServer).Ping(ctx, req.(*STSamplePingReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Sample_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sample.Sample",
	HandlerType: (*SampleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Sample_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sample.proto",
}

func init() { proto1.RegisterFile("sample.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 321 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0xcf, 0x4e, 0x02, 0x31,
	0x18, 0xc4, 0x85, 0x20, 0x84, 0x06, 0xd7, 0xa6, 0x9a, 0x48, 0x36, 0x1e, 0x0c, 0x89, 0x89, 0x31,
	0xb2, 0x0b, 0x78, 0xd0, 0x78, 0x03, 0xed, 0x81, 0x0b, 0x1a, 0x56, 0x13, 0xaf, 0x15, 0x3e, 0xeb,
	0x0a, 0xdb, 0xd6, 0xaf, 0x0d, 0x84, 0x18, 0x2f, 0x3e, 0x82, 0x3e, 0x9a, 0xaf, 0xe0, 0x83, 0x98,
	0xfd, 0xe3, 0x05, 0x3d, 0xb5, 0xd3, 0xf9, 0x65, 0x32, 0x1d, 0xd2, 0xb0, 0x22, 0x31, 0x73, 0x08,
	0x0c, 0x6a, 0xa7, 0x59, 0x35, 0x57, 0xfe, 0xbe, 0xd4, 0x5a, 0xce, 0x21, 0x14, 0x26, 0x0e, 0x85,
	0x52, 0xda, 0x09, 0x17, 0x6b, 0x65, 0x73, 0xca, 0x3f, 0xc9, 0x8e, 0x49, 0x5b, 0x82, 0x6a, 0xdb,
	0xa5, 0x90, 0x12, 0x30, 0xd4, 0x26, 0x23, 0xfe, 0xd2, 0xad, 0x43, 0xb2, 0x1d, 0xdd, 0x46, 0x59,
	0xee, 0x4d, 0xac, 0xe4, 0x18, 0x5e, 0x18, 0x23, 0x15, 0x25, 0x12, 0x68, 0x96, 0x0e, 0x4a, 0x47,
	0xf5, 0x71, 0x76, 0x6f, 0xf1, 0x35, 0xcc, 0x1a, 0xd6, 0x24, 0x35, 0x87, 0x62, 0x02, 0xc3, 0x69,
	0x41, 0xfe, 0xca, 0xd4, 0x49, 0xc0, 0x5a, 0x21, 0xa1, 0x59, 0xce, 0x9d, 0x42, 0x1e, 0x3b, 0x52,
	0xe3, 0x88, 0x97, 0x7a, 0x0a, 0xac, 0x4e, 0x36, 0x39, 0xe2, 0xf5, 0x8c, 0x6e, 0x30, 0x8f, 0x10,
	0x8e, 0x78, 0xa7, 0x66, 0x4a, 0x2f, 0x15, 0x05, 0xc6, 0x88, 0xc7, 0x11, 0xfb, 0x28, 0xed, 0x50,
	0x2d, 0xc4, 0x3c, 0x9e, 0xd2, 0x47, 0x46, 0x49, 0xa3, 0x78, 0xe3, 0x89, 0x71, 0x2b, 0x2a, 0xd9,
	0x16, 0xa9, 0x73, 0xc4, 0x68, 0x65, 0x1d, 0x24, 0xf4, 0xa9, 0xc8, 0xbb, 0x1a, 0xd0, 0xb8, 0xc8,
	0x1b, 0xe9, 0x08, 0x70, 0x01, 0xf4, 0xb9, 0x77, 0x4f, 0xaa, 0x79, 0x75, 0x36, 0x22, 0x95, 0xb4,
	0x3e, 0xdb, 0x0b, 0x8a, 0x61, 0xd7, 0xfe, 0xee, 0xff, 0x6f, 0x58, 0xd3, 0xda, 0x7d, 0xff, 0xfa,
	0xfe, 0x2c, 0x7b, 0xac, 0x11, 0x9a, 0x58, 0xc9, 0xf0, 0x35, 0x5d, 0xe5, 0x6d, 0xb0, 0xf3, 0xd1,
	0xa7, 0xbe, 0xd7, 0xed, 0x9d, 0x05, 0x9d, 0xa0, 0x13, 0x74, 0x2f, 0xce, 0x7b, 0x9d, 0xee, 0x43,
	0x35, 0x5b, 0xf6, 0xf4, 0x27, 0x00, 0x00, 0xff, 0xff, 0x08, 0x08, 0xcd, 0x85, 0xbd, 0x01, 0x00,
	0x00,
}
